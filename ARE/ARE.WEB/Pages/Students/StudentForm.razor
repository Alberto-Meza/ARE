@inject IRepository repository
@inject SweetAlertService sweetAlertService

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombre:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Name" />
                            <ValidationMessage For="@(() => Model.Name)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Apellido Paterno:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.LastName1" />
                            <ValidationMessage For="@(() => Model.LastName1)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Apellido Materno:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.LastName2" />
                            <ValidationMessage For="@(() => Model.LastName2)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Genero:</label>
                        <div>
                            <select class="form-select" @bind="Model.Gender">
                                @if (genders is not null)
                                {
                                    @foreach (var item in genders)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Fecha Nacimiento:</label>
                        <div>
                            <InputDate class="form-control" @bind-Value="@Model.BirthDate" DisplayName="Production Date" />
                            <ValidationMessage For="@(() => Model.BirthDate)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Lugar de nacimiento:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.BirthPlace" />
                            <ValidationMessage For="@(() => Model.BirthPlace)" />
                        </div>
                    </div>
                </div>
            </div>


            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <label class="form-check-label">Asma?:</label>
                            <InputCheckbox class="form-check-input" @bind-Value="@Model.Asthma" />
                            <ValidationMessage For="@(() => Model.Asthma)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">

                        <div class="form-check form-switch">
                            <label class="form-check-label">Combulsion?:</label>
                            <InputCheckbox class="form-check-input" @bind-Value="@Model.Convulsions" />
                            <ValidationMessage For="@(() => Model.Convulsions)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Otras condiciones:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.OtherConditions" />
                            <ValidationMessage For="@(() => Model.OtherConditions)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Alergias:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Allergies" />
                            <ValidationMessage For="@(() => Model.Allergies)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Enfermedades:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Diseases" />
                            <ValidationMessage For="@(() => Model.Diseases)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Medicinas:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Medicines" />
                            <ValidationMessage For="@(() => Model.Medicines)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Observaciones:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Observation" />
                            <ValidationMessage For="@(() => Model.Observation)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Fecha Entrada:</label>
                        <div>
                            <InputDate class="form-control" @bind-Value="@Model.FirstDateAppointment" />
                            <ValidationMessage For="@(() => Model.FirstDateAppointment)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <label class="form-check-label">Activo:</label>
                            <InputCheckbox class="form-check-input" @bind-Value="@Model.IsActive" />
                            <ValidationMessage For="@(() => Model.IsActive)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>País:</label>
                        <div>
                            <select class="form-select" @onchange="CountryChangedAsync">
                                @if (countries is not null)
                                {
                                    @foreach (var country in countries)
                                    {
                                        if (@country.Value == CountrySelected)
                                        {
                                            <option selected value="@country.Value">@country.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@country.Value">@country.Text</option>
                                        }

                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Estado:</label>
                        <div>
                            <select class="form-select" @onchange="StateChangedAsync">
                                @if (states is not null)
                                {
                                    @foreach (var item in states)
                                    {
                                        if (@item.Value == CountrySelected)
                                        {
                                            <option selected value="@item.Value">@item.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }


                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Ciudad:</label>
                        <div>
                            <select class="form-select" @bind="Model.CityId">
                                @if (cities is not null)
                                {
                                    @foreach (var item in cities)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Calle:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Street" />
                            <ValidationMessage For="@(() => Model.Street)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nro:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@Model.Number" />
                            <ValidationMessage For="@(() => Model.Number)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Colonia:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Suburb" />
                            <ValidationMessage For="@(() => Model.Suburb)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Codigo Postal:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.ZipCode" />
                            <ValidationMessage For="@(() => Model.ZipCode)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Tipo Sangineo:</label>
                        <div>
                            <select class="form-select" @bind="Model.BloodTypeId">
                                @if (bloodTypes is not null)
                                {
                                    @foreach (var item in bloodTypes)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Estado Civil:</label>
                        <div>
                            <select class="form-select" @bind="Model.CivilStatusId">
                                @if (civilStatus is not null)
                                {
                                    @foreach (var item in civilStatus)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Grado Escolar:</label>
                        <div>
                            <select class="form-select" @bind="Model.SchoolGradeId">
                                @if (schoolGrades is not null)
                                {
                                    @foreach (var item in schoolGrades)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Tipo Alumno:</label>
                        <MultipleSelector NonSelected="nonSelected" Selected="selected" />
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-12">
                    <div class="mb-3">
                        <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                    </div>
                </div>
            </div>



@code {
    private EditContext editContext = null!;
    private List<ItemCombo>? genders;
    private List<ItemCombo>? countries;
    private List<ItemCombo>? states;
    private List<ItemCombo>? cities;
    private List<ItemCombo>? bloodTypes;
    private List<ItemCombo>? civilStatus;
    private List<ItemCombo>? schoolGrades;

    private List<FilterDTO> filters;
    private string CountrySelected;
    private string StateSelected;
    private string? imageUrl;

    [Parameter]
    public List<MultipleSelectorModel> selected { get; set; } = new();
    [Parameter]
    public List<MultipleSelectorModel> nonSelected { get; set; } = new();

    /*[Parameter]
    public List<StudentType> SelectedStudentTypes { get; set; } = new();

    [Parameter]
    public List<StudentType> NonSelectedStudentTypes { get; set; } = new();
    */

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    public Student Model{ get; set; } = new Student();

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Model);




        if (Model.Id > 0 && Model.City != null)
        {
            CountrySelected = Model.City.State.CountryId.ToString();
            StateSelected = Model.City.StateId.ToString();
        }
        else
        {
            CountrySelected = "0";
            StateSelected = "0";
        }

        //selected = SelectedModelTypes.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        //nonSelected = NonSelectedStudentTypes.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();


        await InitCombos();

        if (!string.IsNullOrEmpty(Model.PhotoPath))
        {
            imageUrl = Model.PhotoPath;
            Model.PhotoPath = null;
        }

    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }



    private async Task InitCombos()
    {
        LoadGendersAsync();
        LoadBloodTypesAsync();
        LoadCivilStatusAsync();
        LoadSchoolGradesAsync();
        await LoadCountriesAsync();
        await LoadStatesAsyn(CountrySelected);
        await LoadCitiesAsyn(StateSelected);
    }


    private async Task LoadGendersAsync()
    {
        //loading = true;
        var responseHttp = await repository.Get<List<ItemCombo>>("/api/utils/GetCombo?name=Gender");
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        genders = responseHttp.Response;
        //loading = false;
    }
    private async Task LoadBloodTypesAsync()
    {
        //loading = true;
        var responseHttp = await repository.Get<List<ItemCombo>>("/api/utils/GetCombo?name=BloodType");
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        bloodTypes = responseHttp.Response;
        //loading = false;
    }
    private async Task LoadCivilStatusAsync()
    {
        //loading = true;
        var responseHttp = await repository.Get<List<ItemCombo>>("/api/utils/GetCombo?name=CivilStatus");
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        civilStatus = responseHttp.Response;
        //loading = false;
    }
    private async Task LoadSchoolGradesAsync()
    {
        //loading = true;
        var responseHttp = await repository.Get<List<ItemCombo>>("/api/utils/GetCombo?name=SchoolGrades");
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        schoolGrades = responseHttp.Response;
        //loading = false;
    }

    private async Task LoadCountriesAsync()
    {
        //loading = true;
        var responseHttp = await repository.Get<List<ItemCombo>>("/api/utils/GetCombo?name=Pais");
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
        //loading = false;
    }
    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        CountrySelected = (string)e.Value!;
        await LoadStatesAsyn(CountrySelected);
    }

    private async Task LoadStatesAsyn(string CountryId)
    {
        //loading = true;
        filters = new List<FilterDTO>();
        filters.Add(new FilterDTO() { Campo = "CountryId", Valor = CountryId, Operator = OperatorType.Igual });
        var responseHttp = await repository.Post<List<FilterDTO>, List<ItemCombo>>("/api/utils/GetComboByFilter?name=State", filters);
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
        //loading = false;
    }
    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = (string)e.Value!;
        await LoadCitiesAsyn(selectedState);
    }

    private async Task LoadCitiesAsyn(string StateId)
    {
        //loading = true;
        filters = new List<FilterDTO>();
        filters.Add(new FilterDTO() { Campo = "StateId", Valor = StateId, Operator = OperatorType.Igual });
        var responseHttp = await repository.Post<List<FilterDTO>, List<ItemCombo>>("/api/utils/GetComboByFilter?name=City", filters);
        if (responseHttp.Error)
        {
            //  loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
        //loading = false;
    }

    private void ImageSelected(string imagenBase64)
    {
        Model.PhotoPath = imagenBase64;
        imageUrl = null;
    }

    }

