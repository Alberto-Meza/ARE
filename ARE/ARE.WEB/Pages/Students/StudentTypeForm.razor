@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />


    <div>

        <div class="card-body">

            <div class="row align-items-center">
                <div class="col-6">
                </div>
                <div class="col-6">
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombre:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@StudentType.Name" />
                            <ValidationMessage For="@(() => StudentType.Name)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                       
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-12">
                    <div class="mb-3">
                        <label>Descripcion:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@StudentType.Descriptions" />
                            <ValidationMessage For="@(() => StudentType.Descriptions)" />
                        </div>
                    </div>
                </div>
               
            </div>


        </div>
        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Guardar Cambios</button>
            <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>
        </div>
    </div>

</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    public StudentType StudentType { get; set; } = new StudentType();

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(StudentType);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }



}

