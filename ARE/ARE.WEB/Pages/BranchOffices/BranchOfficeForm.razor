@inject IRepository repository
@inject SweetAlertService sweetAlertService


            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>País:</label>
                        <div>
                            <select class="form-select" @onchange="CountryChangedAsync">
                                @if (countries is not null)
                                    {
                                    @foreach (var country in countries)
                                        {
                                            if (@country.Value == CountrySelected)
                                            {
                                            <option selected value="@country.Value">@country.Text</option>
                                            }
                                            else
                                            {
                                            <option value="@country.Value">@country.Text</option>
                                            }

                                        }
                                    }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Estado:</label>
                        <div>
                            <select class="form-select" @onchange="StateChangedAsync">
                                @if (states is not null)
                                    {
                                    @foreach (var item in states)
                                        {
                                            if (@item.Value == CountrySelected)
                                            {
                                            <option selected value="@item.Value">@item.Text</option>
                                            }
                                            else
                                            {
                                            <option value="@item.Value">@item.Text</option>
                                            }


                                        }
                                    }
                            </select>
                        </div>
                    </div>
                </div>
            </div>


            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Ciudad:</label>
                        <div>
                            <select class="form-select" @bind="Model.CityId">
                                @if (cities is not null)
                                    {
                                    @foreach (var item in cities)
                                        {
                                        <option value="@item.Value">@item.Text</option>
                                        }
                                    }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombre:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Name" />
                            <ValidationMessage For="@(() => Model.Name)" />
                        </div>
                    </div>
                </div>
            </div>


            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Contacto:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Contact" />
                            <ValidationMessage For="@(() => Model.Contact)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Telefono:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Phone" />
                            <ValidationMessage For="@(() => Model.Phone)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Correo:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Email" />
                            <ValidationMessage For="@(() => Model.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Colonia:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Suburb" />
                            <ValidationMessage For="@(() => Model.Suburb)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Calle:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.Street" />
                            <ValidationMessage For="@(() => Model.Street)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nro:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@Model.Number" />
                            <ValidationMessage For="@(() => Model.Number)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Codigo Postal:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Model.ZipCode" />
                            <ValidationMessage For="@(() => Model.ZipCode)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                </div>
            </div>

            

      


@code {
            //private EditContext editContext = null!;
    private List<ItemCombo>? countries;
        private List<ItemCombo>? states;
        private List<ItemCombo>? cities;
        private List<FilterDTO> filters;
        private string CountrySelected;
        private string StateSelected;


        [Parameter]
        [EditorRequired]
        public BranchOffice Model { get; set; } = new BranchOffice();

        /*[Parameter]
        [EditorRequired]
        public EventCallback OnValidSubmit { get; set; }
        */


        protected override async Task OnInitializedAsync()
        {
            //editContext = new(BranchOffice);

            if (Model.Id > 0)
            {
                CountrySelected = Model.City.State.CountryId.ToString();
                StateSelected = Model.City.StateId.ToString();
            }
            else {
                CountrySelected = "0";
                StateSelected = "0";
            }
            await InitCombos();
        }

        /*private async Task OnBeforeInternalNavigation(LocationChangingContext context)
        {
            var formWasMofied = editContext.IsModified();
            if (!formWasMofied || FormPostedSuccessfully)
            {
                return;
            }

            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

            var confirm = !string.IsNullOrEmpty(result.Value);
            if (confirm)
            {
                return;
            }

            context.PreventNavigation();
        }*/


        private async Task InitCombos() {
            await LoadCountriesAsync();
            await LoadStatesAsyn(CountrySelected);
            await LoadCitiesAsyn(StateSelected);
        }

        private async Task LoadCountriesAsync()
        {
            //loading = true;
            var responseHttp = await repository.Get<List<ItemCombo>>("/api/utils/GetCombo?name=Pais");
            if (responseHttp.Error)
            {
                //  loading = false;
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            countries = responseHttp.Response;
            //loading = false;
        }
        private async Task CountryChangedAsync(ChangeEventArgs e)
        {
            CountrySelected = (string)e.Value!;
            await LoadStatesAsyn(CountrySelected);
        }

        private async Task LoadStatesAsyn(string CountryId)
        {
            //loading = true;
            filters = new List<FilterDTO>();
            filters.Add(new FilterDTO() { Campo = "CountryId", Valor = CountryId, Operator = OperatorType.Igual });
            var responseHttp = await repository.Post<List<FilterDTO>, List<ItemCombo>>("/api/utils/GetComboByFilter?name=State", filters);
            if (responseHttp.Error)
            {
                //  loading = false;
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            states = responseHttp.Response;
            //loading = false;
        }
        private async Task StateChangedAsync(ChangeEventArgs e)
        {
            var selectedState = (string)e.Value!;
            await LoadCitiesAsyn(selectedState);
        }

        private async Task LoadCitiesAsyn(string StateId)
        {
            //loading = true;
            filters = new List<FilterDTO>();
            filters.Add(new FilterDTO() { Campo = "StateId", Valor = StateId, Operator = OperatorType.Igual });
            var responseHttp = await repository.Post<List<FilterDTO>, List<ItemCombo>>("/api/utils/GetComboByFilter?name=City", filters);
            if (responseHttp.Error)
            {
                //  loading = false;
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            cities = responseHttp.Response;
            //loading = false;
        }


    }

