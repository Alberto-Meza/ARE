@page "/subTypeOfCharges/{TypeOfChargeId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IJSRuntime JS


<GenericList TitleCatalogo="Sub Tipos"
             IconTitle="oi oi-globe"
             MyList="SubTypeOfCharges"
             Filter=@Filter
             currentPage="currentPage"
             totalPages="totalPages"
             SelectedPage="SelectedPage"
             ApplyFilterAsync="ApplyFilterAsync"
             CleanFilterAsync="CleanFilterAsync"
             AddAsync="Add">

    <BtnBackPage>
        <a class="btn" href="/typeOfCharges"><i class="oi oi-arrow-thick-left" /> </a>
    </BtnBackPage>


    <Body>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Sub Tipo</th>
                    <th>Precio</th>
                    <th style="width:180px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in SubTypeOfCharges!)
                {
                    <tr>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.Price.ToString("C")
                        </td>
                        <td>
                            <button class="btn btn-warning" @onclick=@(() => EditAsync(item.Id))> <i class="oi oi-pencil" /> </button>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(item.Id))> <i class="oi oi-trash" /> </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    </Body>

</GenericList>


<CascadingValue Value="helperActions">
    <PopUpByComponent @ref="PopUpComponent" IconTitle="oi oi-box" TitlePopUp="@TitlePopUp"
                      Tipo="typeof(SubTypeOfChargeForm)" parameters="parameters" Modelo="model"></PopUpByComponent>
</CascadingValue>

@code {
    public string ApiBase = "api/subTypeOfCharges";
    private TypeOfCharge? typeOfCharge;
    private List<SubTypeOfCharge>? SubTypeOfCharges;
    private int currentPage = 1;
    private int totalPages;
    private PagFiltersDTO pagFiltersDTO = new();

    private SubTypeOfCharge model = new();


    public string TitlePopUp = null!;
    public IDictionary<string, object> parameters { get; set; } = new Dictionary<string, object>();
    HelperActions helperActions = new HelperActions();
    private PopUpByComponent<SubTypeOfCharge> PopUpComponent;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [Parameter]
    public int TypeOfChargeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        helperActions.Action = OnValidSubmit;
        parameters.Add("Model", model);
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }


        pagFiltersDTO.Pagination.Filter = Filter;
        var filters = new List<FilterDTO>();
        filters.Add(new FilterDTO() { Campo = "TypeOfChargeId", Valor = TypeOfChargeId.ToString(), Operator = OperatorType.Igual });

        pagFiltersDTO.Filters = filters;


        string url1 = $"{ApiBase}/GetAll";
        string url2 = $"{ApiBase}/totalPages";

        var responseHppt = await repository.Get<TypeOfCharge>($"api/typeOfCharges/{TypeOfChargeId}");
        var responseHppt2 = await repository.Post<PagFiltersDTO, List<SubTypeOfCharge>>(url1, pagFiltersDTO);
        var responseHppt3 = await repository.Post<PagFiltersDTO, int>(url2, pagFiltersDTO);


        typeOfCharge = responseHppt.Response;
        SubTypeOfCharges = responseHppt2.Response;
        totalPages = responseHppt3.Response;


        StateHasChanged();
    }

    private void Add()
    {
        TitlePopUp = "Agregar Sub Tipo";
        model = new();
        parameters["Model"] = model;
        PopUpComponent.Show();
    }

    private async Task EditAsync(int CityId)
    {
        TitlePopUp = "Modificar Sub Tipo";


        var responseHttp = await repository.Get<SubTypeOfCharge>($"/api/subTypeOfCharges/{CityId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            model = responseHttp.Response;
            parameters["Model"] = model;
            PopUpComponent.Show();
        }

    }


    private void OnValidSubmit()
    {

        if (model?.Id > 0)
            Edit();
        else
            Create();

    }

    private async Task Create()
    {
        model.TypeOfChargeId = TypeOfChargeId;
        var httpResponse = await repository.Post(ApiBase, model);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await Return();
        JS.ShowToast("Se guardo correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
    }

    private async Task Edit()
    {
        var responseHttp = await repository.Put(ApiBase, model);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await Return();
        JS.ShowToast("Se modifico correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
    }

    private async Task DeleteAsync(int cityId)
    {
        if (!await JS.Confirm("Confirmación", "¿Esta seguro que quieres borrar el registro?", "SI", TypeAlert.question))
        {
            return;
        }

        var responseHttp = await repository.Delete($"{ApiBase}/{cityId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            await LoadAsync();
            JS.ShowToast("Se elimino correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
        }

    }

    private async Task Return()
    {
        PopUpComponent.Hiden();
        await LoadAsync();
    }


    #region DataGrid

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync("");
    }

    private async Task ApplyFilterAsync(string filter)
    {
        Filter = filter;
        int page = 1;
        await SelectedPage(page);
    }
    #endregion
}
