@page "/jobs"
@inject IRepository repository
@inject SweetAlertService Alert
@inject NavigationManager navigationManager
@inject IJSRuntime JS



<GenericList TitleCatalogo="Puestos"
             IconTitle="oi oi-box"
             MyList="Jobs"
             Filter=@Filter
             currentPage="currentPage"
             totalPages="totalPages"
             SelectedPage="SelectedPage"
             ApplyFilterAsync="ApplyFilterAsync"
             CleanFilterAsync="CleanFilterAsync"
             AddAsync="Add">
    <Body>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Departamento</th>
                    <th>Nombre</th>
                    <th style="width:260px"></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Jobs!)
                {
                    <tr>
                        <td>
                            @item.Department.Name
                        </td>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            <button class="btn btn-warning" @onclick=@(() => EditAsync(item.Id))> <i class="oi oi-pencil" /> </button>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(item.Id))> <i class="oi oi-trash" /> </button>
                        </td>
                    </tr>

                }
            </tbody>
        </table>


    </Body>


</GenericList>


<CascadingValue Value="helperActions">
    <PopUpByComponent @ref="PopUpComponent" IconTitle="oi oi-box" TitlePopUp="@TitlePopUp"
                      Tipo="typeof(JobForm)" parameters="parameters" Modelo="model"></PopUpByComponent>
</CascadingValue>


@code {

    public string ApiBase = "api/jobs";
    public List<Job>? Jobs { get; set; }
    private int currentPage = 1;
    private int totalPages;
    private Job model = new();

    public string TitlePopUp = null!;
    public IDictionary<string, object> parameters { get; set; } = new Dictionary<string, object>();
    HelperActions helperActions = new HelperActions();
    private PopUpByComponent<Job> PopUpComponent;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        helperActions.Action = OnValidSubmit;
        parameters.Add("Model", model);
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = $"{ApiBase}/GetAll?page={page}&filter={Filter}";
        string url2 = $"{ApiBase}/totalPages?&filter={Filter}";

        var responseHppt = await repository.Get<List<Job>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Jobs = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
        StateHasChanged();

    }

    private void Add()
    {
        TitlePopUp = "Agregar Puesto";
        model = new();
        parameters["Model"] = model;
        PopUpComponent.Show();
    }

    private async Task EditAsync(int Id)
    {
        TitlePopUp = "Modificar Puesto";


        var responseHttp = await repository.Get<Job>($"/{ApiBase}/{Id}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await Alert.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        else
        {
            model = responseHttp.Response!;
            parameters["Model"] = model;
            PopUpComponent.Show();
        }

    }

    private void OnValidSubmit()
    {

        if (model?.Id > 0)
            Edit();
        else
            Create();

    }

    private async Task Create()
    {
        var httpResponse = await repository.Post($"/{ApiBase}", model);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await Alert.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await Return();

        JS.ShowToast("Se guardo correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
    }

    private async Task Edit()
    {
        var responseHttp = await repository.Put($"/{ApiBase}", model);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await Alert.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await Return();


        JS.ShowToast("Se modifico correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);

    }

    private async Task DeleteAsync(int Id)
    {

        if (!await JS.Confirm("Confirmación", "¿Esta seguro que quieres borrar el registro?", "SI", TypeAlert.question))
        {
            return;
        }

        var responseHTTP = await repository.Delete($"{ApiBase}/{Id}");

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await Alert.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            await LoadAsync();
            JS.ShowToast("Se elimino correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
        }


    }

    private async Task Return()
    {
        PopUpComponent.Hiden();
        await LoadAsync();
    }

    #region DataGrid

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync("");
    }

    private async Task ApplyFilterAsync(string filter)
    {
        Filter = filter;
        int page = 1;
        await SelectedPage(page);
    }
    #endregion
}

