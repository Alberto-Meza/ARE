@page "/states/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using ARE.WEB.Pages.Cities



<GenericList ShowPopUp="ShowPopUp"
             TitleCatalogo="Ciudades"
             IconTitle="oi oi-globe"
             MyList="cities"
             Filter=@Filter
             currentPage="currentPage"
             totalPages="totalPages"
             SelectedPage="SelectedPage"
             ApplyFilterAsync="ApplyFilterAsync"
             CleanFilterAsync="CleanFilterAsync"
             AddAsync="Add">

    <BtnBackPage>
        <a class="btn" href="/countries/details/@CountryId"><i class="oi oi-arrow-thick-left" /> </a>
    </BtnBackPage>


    <Body>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Ciudad</th>
                    <th style="width:180px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var city in cities!)
                {
                    <tr>
                        <td>
                            @city.Name
                        </td>
                        <td>
                            <button class="btn btn-warning" @onclick=@(() => EditAsync(city.Id))> <i class="oi oi-pencil" /> </button>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))> <i class="oi oi-trash" /> </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    </Body>

    <PopUpAddEdit>

        <CityForm @ref="cityForm" Title="@TitlePopUp" City="city" OnValidSubmit="OnValidSubmit" ReturnAction="Return" />

    </PopUpAddEdit>
</GenericList>



@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;
    private bool ShowPopUp = false;
    public string TitlePopUp = null!;
    public int CountryId { get; set; }

    private City city = new();
    private CityForm? cityForm;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = $"api/cities/ByStateId?id={StateId}&page={page}&filter={Filter}";
        string url2 = $"api/cities/totalPages?id={StateId}&filter={Filter}";
        var responseHppt = await repository.Get<State>($"api/states/{StateId}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;

        CountryId = state.CountryId!;
    }

    private void Add()
    {
        TitlePopUp = "Agregar Ciudad";
        city = new();
        ShowPopUp = true;
    }

    private async Task EditAsync(int CityId)
    {
        TitlePopUp = "Modificar Ciudad";


        var responseHttp = await repository.Get<City>($"/api/cities/{CityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        else
        {
            city = responseHttp.Response;
            ShowPopUp = true;
        }

    }


    private async Task OnValidSubmit()
    {

        if (city?.Id > 0)
            await Edit();
        else
            await Create();

    }

    private async Task Create()
    {
        city.StateId = StateId;
        var httpResponse = await repository.Post("/api/cities", city);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await Return();
    }

    private async Task Edit()
    {
        var responseHttp = await repository.Put("/api/cities", city);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }


        await Return();
    }

    private async Task DeleteAsync(int cityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente deseas eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{cityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task Return()
    {
        await LoadAsync();
        ShowPopUp = false;
    }


    #region DataGrid

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync("");
    }

    private async Task ApplyFilterAsync(string filter)
    {
        Filter = filter;
        int page = 1;
        await SelectedPage(page);
    }
    #endregion
}
