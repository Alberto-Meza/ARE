@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />


    <div class="card">
        <div class="card-header">
            <span>

                <div class="row align-items-center">
                    <div class="col-9">
                        <i class="oi oi-globe"></i> @Title
                    </div>
                    
                    <div class="col-3">
                        <button class="btn btn-sm float-end" @onclick="ReturnAction"><i class="oi oi-x"></i></button>
                    </div>
                </div>

            </span>
        </div>
        <div class="card-body">

            <div class="mb-3">
                <label>País:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@Country.Name" />
                    <ValidationMessage For="@(() => Country.Name)" />
                </div>
            </div>

        </div>
        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Guardar Cambios</button>
            <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
        </div>
    </div>

    
</EditForm>


@code {

    #region Properties
    [Parameter]
    public string Title { get; set; } = string.Empty;

    public EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public Country Country { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;
    #endregion

    #region Eventos
    protected override void OnInitialized()
    {
        editContext = new(Country);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited || FormPostedSuccessfully) { return; }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText="No",
            ConfirmButtonText="Si"

        });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm) { return; }

        context.PreventNavigation();
    }
    #endregion

}
