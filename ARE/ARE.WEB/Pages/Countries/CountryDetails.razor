@page "/countries/details/{CountryId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService Alert
@inject IJSRuntime JS
@using ARE.WEB.Pages.States;


<GenericList TitleCatalogo="Estados"
             IconTitle="oi oi-globe"
             MyList="states"
             Filter=@Filter
             currentPage="currentPage"
             totalPages="totalPages"
             SelectedPage="SelectedPage"
             ApplyFilterAsync="ApplyFilterAsync"
             CleanFilterAsync="CleanFilterAsync"
             AddAsync="Add">

    <BtnBackPage>
        <a class="btn" href="/countries"><i class="oi oi-arrow-thick-left" /> </a>
    </BtnBackPage>


    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Estado / Departamento</th>
                    <th style="width:140px">Ciudades</th>
                    <th style="width:260px"></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var state in states!)
                {
                    <tr>
                        <td>
                            @state.Name
                        </td>
                        <td>
                            @state.CitiesNumber
                        </td>
                        <td>
                            <a class="btn btn-info" href="/states/details/@state.Id"><i class="oi oi-list" /></a>
                            <button class="btn btn-warning" @onclick=@(() => EditAsync(state.Id))> <i class="oi oi-pencil" /> </button>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))> <i class="oi oi-trash" /> </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>


</GenericList>


<CascadingValue Value="helperActions">
    <PopUpByComponent @ref="PopUpComponent" IconTitle="oi oi-box" TitlePopUp="@TitlePopUp"
                      Tipo="typeof(StateForm)" parameters="parameters" Modelo="model"></PopUpByComponent>
</CascadingValue>


@code {
    public string ApiBase = "api/states";
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;


    private State model { get; set; } = new();

    public string TitlePopUp = null!;
    public IDictionary<string, object> parameters { get; set; } = new Dictionary<string, object>();
    HelperActions helperActions = new HelperActions();
    private PopUpByComponent<State> PopUpComponent;



    [Parameter]
    public int CountryId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";



    protected override async Task OnInitializedAsync()
    {
        helperActions.Action = OnValidSubmit;
        parameters.Add("Model", model);
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }


        string url1 = $"{ApiBase}/ByCountryId?id={CountryId}&page={page}&filter={Filter}";
        string url2 = $"{ApiBase}/totalPages?id={CountryId}&filter={Filter}";
        var responseHppt = await repository.Get<Country>($"api/countries/{CountryId}");
        var responseHppt2 = await repository.Get<List<State>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        country = responseHppt.Response;
        states = responseHppt2.Response;
        totalPages = responseHppt3.Response;

        StateHasChanged();
    }

    private void Add()
    {
        TitlePopUp = "Agregar Estado";
        model = new();
        parameters["Model"] = model;
        PopUpComponent.Show();
    }

    private async Task EditAsync(int StateId)
    {
        TitlePopUp = "Modificar Estado";

        var responseHttp = await repository.Get<State>($"{ApiBase}/{StateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await Alert.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            model = responseHttp.Response;
            parameters["Model"] = model;
            PopUpComponent.Show();
        }

    }


    private void OnValidSubmit()
    {

        if (model?.Id > 0)
            Edit();
        else
            Create();

    }

    private async Task Create()
    {
        model.CountryId = CountryId;
        var httpResponse = await repository.Post(ApiBase, model);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await Alert.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await Return();
        JS.ShowToast("Se guardo correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
    }

    private async Task Edit()
    {
        var responseHttp = await repository.Put(ApiBase, model);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await Alert.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }


        await Return();
        JS.ShowToast("Se modifico correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
    }

    private async Task DeleteAsync(int id)
    {
        if (!await JS.Confirm("Confirmación", "¿Esta seguro que quieres borrar el registro?", "SI", TypeAlert.question))
        {
            return;
        }

        var responseHttp = await repository.Delete($"{ApiBase}/{id}");
        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetErrorMessageAsync();
            await Alert.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            await LoadAsync();
            JS.ShowToast("Se elimino correctamente", TypeAlert.success, AlertPosition.center_end, false, 2000);
        }

    }

    private async Task Return()
    {
        PopUpComponent.Hiden();
        await LoadAsync();
    }

    #region DataGrid

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync("");
    }

    private async Task ApplyFilterAsync(string filter)
    {
        Filter = filter;
        int page = 1;
        await SelectedPage(page);
    }
    #endregion

}
