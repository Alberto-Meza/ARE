<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ARE</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/countries">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Paises
            </NavLink>
        </div>
        @if (collapseMenu)
            {
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/branchOffices">
                <span class="oi oi-box" aria-hidden="true"></span> Sucursales
            </NavLink>
        </div>
            }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    private bool collapseMenu = true;

    protected override async Task OnParametersSetAsync()
    {
        //var authenticationState = await authenticationStateTask;
        //var isautenticate = authenticationState.User.Claims.Where(c => c.Type == "Nombre").FirstOrDefault().Value;
        //if(isautenticate == "Zarela Elena")
        //{
        //    collapseMenu = true;

        //}

    }



    protected override async void OnInitialized()
    {
        var authenticationState = await authenticationStateTask;
        var isautenticate = authenticationState.User.Claims.Where(c => c.Type == "").Count();
    }
}

