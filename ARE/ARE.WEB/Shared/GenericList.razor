@typeparam Titem

@if (MyList is null)
{
    @if (Loading is null)
    {
        <div class="spinner" />
    }
    else
    {
        @Loading
    }
}
else
{
    <div class="card">
        <div class="card-header">
            <span>

                <div class="row align-items-center">
                    <div class="col-2">
                        @if (BtnBackPage is not null)
                        {
                            @BtnBackPage
                        }
                        <i class=@IconTitle></i> @TitleCatalogo
                    </div>
                    <div class="col-8">
                        <FilterHeader Filter=@Filter ApplyFilterAsync=ApplyFilterAsync CleanFilterAsync=CleanFilterAsync />
                    </div>
                    <div class="col-2">

                        <button class="btn btn-sm btn-primary float-end" @onclick=@(() => Add())><i class="oi oi-plus"></i> Agreagar </button>
                    </div>
                </div>

            </span>
        </div>
        <div class="card-body">

            @if (MyList.Count == 0)
            {
                <p>No hay registros para mostrar...</p>
            }
            else
            {
                @Body
            }

        </div>
        <div class="card-footer">
            <Pagination CurrentPage=currentPage TotalPages=totalPages SelectedPage=SelectedPage />
        </div>
    </div>

   

}



@code {


    [Parameter]
    public RenderFragment? BtnBackPage { get; set; }

    [Parameter]
    public RenderFragment? Loading { get; set; }

    [Parameter]
    public RenderFragment? NoRecords { get; set; }

    [Parameter]
    [EditorRequired]
    public RenderFragment Body { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public List<Titem> MyList { get; set; } = null!;

    [Parameter]
    public int currentPage { get; set; } = 1;

    [Parameter]
    public int totalPages { get; set; } = 1;

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    [Parameter]
    public EventCallback<string> ApplyFilterAsync { get; set; }

    [Parameter]
    public EventCallback CleanFilterAsync { get; set; }

    [Parameter]
    public string Filter { get; set; } = string.Empty;

    [Parameter]
    public string TitleCatalogo { get; set; } = string.Empty;

    [Parameter]
    public string TitlePopUp { get; set; } = string.Empty;

    [Parameter]
    public string IconTitle { get; set; } = string.Empty;


    [Parameter]
    public EventCallback AddAsync { get; set; }

    private async void Add()
    {
        await AddAsync.InvokeAsync();
    }

   

}
