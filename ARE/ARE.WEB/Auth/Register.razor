@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<EditForm Model="userDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-person" /> Registrar Nuevo  Usuario
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Registrar</button>
            </span>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombres:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Name" />
                            <ValidationMessage For="@(() => userDTO.Name)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Apellido Materno:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.LastName1" />
                            <ValidationMessage For="@(() => userDTO.LastName1)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Apellido Paterno:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.LastName2" />
                            <ValidationMessage For="@(() => userDTO.LastName2)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Teléfono:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                            <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Email" />
                            <ValidationMessage For="@(() => userDTO.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                            <ValidationMessage For="@(() => userDTO.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Confirmación de contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                            <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Foto:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Photo" />
                            <ValidationMessage For="@(() => userDTO.Photo)" />
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

</EditForm>

@code {
    private UserDTO userDTO = new();

    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.Interno;
        var responseHttp = await repository.Post<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
